import { createHotContext as __vite__createHotContext } from "/vendor/vite-client.js";import.meta.hot = __vite__createHotContext("/src/components/Linote.svelte");/* src/components/Linote.svelte generated by Svelte v3.52.0 */
import {
	SvelteComponentDev,
	add_location,
	attr_dev,
	component_subscribe,
	detach_dev,
	dispatch_dev,
	element,
	globals,
	init,
	insert_dev,
	listen_dev,
	noop,
	prop_dev,
	run_all,
	safe_not_equal,
	set_style,
	validate_slots,
	validate_store
} from "/vendor/.vite-deps-svelte_internal.js__v--31590584.js";

const { window: window_1 } = globals;
import { notes } from "/src/store.js.js";
import hotkeys from '/vendor/.vite-deps-hotkeys-js.js__v--31590584.js';
const file = "src/components/Linote.svelte";

function create_fragment(ctx) {
	let textarea;
	let textarea_value_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			textarea = element("textarea");
			set_style(textarea, "left", /*left*/ ctx[0] + "px");
			set_style(textarea, "top", /*top*/ ctx[1] + "px");
			attr_dev(textarea, "class", "draggable s-zWC3d7Vlfdzg");
			textarea.value = textarea_value_value = "" + (/*$notes*/ ctx[2] + "money ");
			add_location(textarea, file, 56, 0, 1030);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, textarea, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(window_1, "mouseup", /*onMouseUp*/ ctx[5], false, false, false),
					listen_dev(window_1, "mousemove", /*onMouseMove*/ ctx[4], false, false, false),
					listen_dev(textarea, "mousedown", /*onMouseDown*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*left*/ 1) {
				set_style(textarea, "left", /*left*/ ctx[0] + "px");
			}

			if (dirty & /*top*/ 2) {
				set_style(textarea, "top", /*top*/ ctx[1] + "px");
			}

			if (dirty & /*$notes*/ 4 && textarea_value_value !== (textarea_value_value = "" + (/*$notes*/ ctx[2] + "money "))) {
				prop_dev(textarea, "value", textarea_value_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(textarea);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $notes;
	validate_store(notes, 'notes');
	component_subscribe($$self, notes, $$value => $$invalidate(2, $notes = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Linote', slots, []);
	let { left = 100 } = $$props;
	let { top = 100 } = $$props;
	let moving = false;

	function onMouseDown() {
		moving = true;
	}

	function onMouseMove(e) {
		if (moving) {
			$$invalidate(0, left += e.movementX);
			$$invalidate(1, top += e.movementY);
		}
	}

	function onMouseUp() {
		moving = false;
	}

	const getSelectedText = () => {
		const element = document.activeElement;
		const isInTextField = element.tagName === "INPUT" || element.tagName === "TEXTAREA";

		return isInTextField
		? element.value.substring(element.selectionStart, element.selectionEnd)
		: window.getSelection()?.toString() ?? "";
	};

	hotkeys('s', function () {
		const selectedText = getSelectedText();

		// notes = [...notes, selectedText]
		notes.set("internet");
	});

	const writable_props = ['left', 'top'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Linote> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('left' in $$props) $$invalidate(0, left = $$props.left);
		if ('top' in $$props) $$invalidate(1, top = $$props.top);
	};

	$$self.$capture_state = () => ({
		notes,
		hotkeys,
		left,
		top,
		moving,
		onMouseDown,
		onMouseMove,
		onMouseUp,
		getSelectedText,
		$notes
	});

	$$self.$inject_state = $$props => {
		if ('left' in $$props) $$invalidate(0, left = $$props.left);
		if ('top' in $$props) $$invalidate(1, top = $$props.top);
		if ('moving' in $$props) moving = $$props.moving;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [left, top, $notes, onMouseDown, onMouseMove, onMouseUp];
}

class Linote extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { left: 0, top: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Linote",
			options,
			id: create_fragment.name
		});
	}

	get left() {
		throw new Error("<Linote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set left(value) {
		throw new Error("<Linote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get top() {
		throw new Error("<Linote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set top(value) {
		throw new Error("<Linote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

import * as ___SVELTE_HMR_HOT_API from '/vendor/svelte-hmr-runtime-hot-api-esm.js__v--31590584.js';import { adapter as ___SVELTE_HMR_HOT_API_PROXY_ADAPTER } from '/vendor/svelte-hmr-runtime-proxy-adapter-dom.js__v--31590584.js';if (import.meta && import.meta.hot) { if (false) import.meta.hot.acceptExports(['default']);; Linote = ___SVELTE_HMR_HOT_API.applyHmr({ m: import.meta, id: "/Users/money/Projects/WebExtensions/SveltePlay/src/components/Linote.svelte", hotOptions: {"preserveLocalState":false,"noPreserveStateKey":["@hmr:reset","@!hmr"],"preserveAllLocalStateKey":"@hmr:keep-all","preserveLocalStateKey":"@hmr:keep","noReload":false,"optimistic":false,"acceptNamedExports":true,"acceptAccessors":true,"injectCss":false,"cssEjectDelay":100,"native":false,"importAdapterName":"___SVELTE_HMR_HOT_API_PROXY_ADAPTER","noOverlay":true,"allowLiveBinding":false,"partialAccept":true}, Component: Linote, ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER, acceptable: true, preserveLocalState: false, emitCss: true, }); }
export default Linote;


import "/src/components/Linote.svelte__svelte_type--style_lang.css.js";
